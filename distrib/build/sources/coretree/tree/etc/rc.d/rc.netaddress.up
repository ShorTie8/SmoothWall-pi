#!/bin/sh

. /etc/rc.d/inc.rc-functions

echolog "" "" "$DEBUG_DHCPCD" "entering rc.netaddress.up [`date`]"

. /var/smoothwall/ethernet/settings

# Block all inbound packets on all NICs. This mostly solves the DoS problem.
. /etc/rc.d/inc.block-ingress

echolog "e" "s" "" "  firewall"
. /etc/rc.d/rc.firewall.up
echolog "e" "s" "" "  traffic stats collector"
/usr/sbin/trafficlogger
echolog "e" "s" "" "  DMZ pinholes"
/usr/bin/smoothcom setinternal
echolog "e" "s" "" "  advanced networking features"
/usr/bin/smoothcom setadvnet
echolog "e" "s" "" "  IP block"
/usr/bin/smoothcom setipblock
echolog "e" "s" "" "  Timed Access IPs"
/usr/bin/smoothcom settimedaccess
echolog "e" "s" "" "Poke udev"
/sbin/udevadm trigger
/sbin/udevadm settle

# Place to store delayed IF uppage
nicsToUp=""

# GREEN
if [ "$1" != "NOTGREEN" ]; then
	if [ "$GREEN_DEV" != "" ]; then
		/usr/sbin/ip addr add $GREEN_ADDRESS/$GREEN_NETMASK dev $GREEN_DEV
		nicsToUp="$nicsToUp $GREEN_DEV"
	else
		echolog "" "s" "" "WARNING: No driver set for GREEN"
	fi
fi

# ORANGE
if [ "$CONFIG_TYPE" == "1" -o "$CONFIG_TYPE" == "3" -o "$CONFIG_TYPE" == "5" -o "$CONFIG_TYPE" == "7" ]; then
	if [ "$ORANGE_DEV" != "" ]; then
		/usr/sbin/ip addr add $ORANGE_ADDRESS/$ORANGE_NETMASK dev $ORANGE_DEV
		nicsToUp="$nicsToUp $ORANGE_DEV"
	else
		echolog "" "s" "" "WARNING: No driver set for ORANGE"
	fi
fi

# PURPLE
if [ "$CONFIG_TYPE" == "4" -o "$CONFIG_TYPE" == "5" -o "$CONFIG_TYPE" == "6" -o "$CONFIG_TYPE" == "7" ]; then
	if [ "$PURPLE_DEV" != "" ]; then
		/usr/sbin/ip addr add $PURPLE_ADDRESS/$PURPLE_NETMASK dev $PURPLE_DEV
		nicsToUp="$nicsToUp $PURPLE_DEV"
	else
		echolog "" "s" "" "WARNING: No driver set for PURPLE"
	fi
fi
	
# RED
if [ "$CONFIG_TYPE" == "2" -o "$CONFIG_TYPE" == "3" -o "$CONFIG_TYPE" == "6" -o "$CONFIG_TYPE" == "7" ]; then
	if [ "$RED_DEV" != "" ]; then
                
		rm -f /var/lib/dhcpcd/dhcpcd-*.info

		if [ "$RED_TYPE" == "DHCP" ]; then
                        echolog "" "" "$DEBUG_DHCPCD" "entering RED = DHCP BLOCK (rc.netaddress.up)"
			# DHCPCD handles everything
			if [ "$RED_IGNOREMTU" != "off" ]; then
				IGNOREMTU=" -M"
			else
				IGNOREMTU=""
			fi
                        # If a MAC address is specified, set it. (ap.: check this if bridges are used!*)
                        if [ ! -z "$RED_MAC" ]; then
                                /usr/sbin/ip link set dev $RED_DEV address $RED_MAC
			else
				nativeMAC=`grep "NAME=\"$RED_DEV\"" /etc/udev/rules.d/70-Smoothwall-custom-NIC.rules |
				  sed -e 's/.*address.=="//' -e 's/".*//'`
                                /usr/sbin/ip link set dev $RED_DEV address $nativeMAC
                        fi
                        echolog "" "" "$DEBUG_DHCPCD" "invoke dhcpcd daemon: (rc.netaddress.up)"
			/usr/sbin/dhcpcd -4 -b -A -L -q --nodev -t 0 -h $RED_DHCP_HOSTNAME \
                          -c /etc/rc.d/rc.updatered $RED_DEV
                       
                        # TODO: MTU override will be handled via dhcpcd.conf.

                        echolog "" "" "$DEBUG_DHCPCD" "exiting RED = DHCP BLOCK rc.netaddress.up [`date`]"

		elif [ "$RED_TYPE" == "STATIC" ]; then
			# We do it when static
			/usr/sbin/ip addr add $RED_ADDRESS/$RED_NETMASK dev $RED_DEV
			nicsToUp="$nicsToUp $RED_DEV"
			if [ "$DEFAULT_GATEWAY" != "" ]; then
				nicsToUp="$nicsToUp $DEFAULT_GATEWAY"
			else
				echolog "e" "s" "" "No default gateway found for STATIC RED; re-run setup"
			fi
		else
			# Must be PPPoX; link must be up, but needs no addressing
			nicsToUp="$nicsToUp $RED_DEV"
		fi
	else
		echolog "" "s" "" "WARNING: No driver set for RED"
	fi
fi

# Bring the links up now if during operation. Otherwise, rc.sysinit handles it
if [ ! -f /var/run/STARTSTOP ]; then
	. /etc/rc.d/inc.links-up
fi

echolog "$DEBUG" "" "$DEBUG_DHCPCD" "exiting rc.netaddress.up [`date`]"
