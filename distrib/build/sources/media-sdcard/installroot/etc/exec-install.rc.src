#! /bin/bash

echo -e "${DONE}    Welcome to exec-install.rc${NO}"

function compute_swap () {
  # swap fixed to installed RAM, but must be shrunk if RAM > .25*hdsize
  # measure in bytes!

  typeset -i memsize mem_mib disk_eighth $2

  set `grep MemTotal /proc/meminfo`
  # Convert size to 1MiB blocks
  case $3 in
    kB) memsize=$2/1024;;
    MB) memsize=$2;;
    GB) memsize=$2*1024;;
    TB) memsize=$2*1024**2;;
    *) memsize=$2/1024;;      # Assume it is kB
  esac

  # If memory is > 1/8 of the disk, crowbar swap to 1/8 of the disk
  disk_eighth=remainder/8
  if [ $memsize -gt $disk_eighth ]; then
    # Base swap on 1/8 disk size, but not larger than 1GiB
    swapMiB=disk_eighth
    if [ $swapMiB -gt 1024 ]; then
      swapMiB=1024
    fi
  else
    # Base swap on memory size, but not smaller than 256MiB
    swapMiB=memsize
    if [ $swapMiB -lt 256 ]; then
      swapMiB=256
    fi
  fi
  swapsize=swapMiB
}

function tidyBackupDir () {
  echo "Tidy Backup Dir"
  restoreType=$1

  # Get the name of the restore medium
  restoreIsLink=`/usr/lib/klibc/bin/readlink /restore`
  OIFS=$IFS; IFS=","
  set `grep "${rd_id[$rd]}" /harddisk/var/smoothwall/backup/config || echo "${rd_id[$rd]}"`
  IFS=$OIFS
  mediumName=$1
  # Set flag and history
  restoreDate=`chroot /harddisk date "+%Y-%m-%d; %H:%M:%S"`
  echo "Last restore: AUTO; date=$restoreDate; type=$restoreType; medium=$mediumName" > /harddisk/var/smoothwall/backup/flag
  cat /harddisk/var/smoothwall/backup/flag >> /harddisk/var/smoothwall/backup/history
  # Clear tmp files/dirs
  (
    cd /harddisk/var/smoothwall/backup
    rm -rf `ls -C1 | egrep -v "config|docs|flag|history|settings"` backup.flag
  )
}

# ###############  End functions  ###########################

# Validate values from config-install.rc. If any are blank, fail.
  echo
  echo "CD is $CD"
  echo "cd_dev $CD is ${cd_dev[$CD]}"
  echo "hd is $hd"
  echo "hd_dev $hd is ${hd_dev[$hd]}"
  echo "archive is $archive"
  echo "restore is $restore"
  echo; echo

FAIL=0
if [ "$hd" = "" ]; then echo "Var 'hd' is blank"; FAIL=1; fi
if [ "$dev" = "" ]; then echo "Var 'dev' is blank"; FAIL=1; fi
if [ "$maxMiB" = "" ]; then echo "Var 'maxMiB' is blank"; FAIL=1; fi
if [ "$restore" = "" ]; then echo "Var 'restore' is blank"; FAIL=1; fi
if [ "$restore" -gt 1 -a "{$archive_id[*]}" = "" ]; then echo "Var 'archive_id' is blank"; FAIL=1; fi
if [ "$restore" -gt 1 -a "$archive" = "" ]; then echo "Var 'archive' is blank"; FAIL=1; fi

if [ $FAIL -eq 1 ]; then
  echo "At least one config var is blank; advanced install cannot proceed."
  exit 1
fi

# sed changes this to the currently used kernel version
#
KERNEL_VER=KeRnElVeRsIoN
KERNEL_TYPE=KeRnElTyPe
CONFIG_ROOT=/var/smoothwall

BACKTITLE="Smoothwall PRODUCT_NAME PRODUCT_VERSIONPRODUCT_EXTRA (mARCH) -- http://smoothwall.org"
TITLE="${BOUL}      $BACKTITLE${NO}"

echo -e "$TITLE"
echo
echo -e "${STEP}      Tweak udev${NO}"
echo "Tweak udev" >/dev/tty2
  echo "  Creating 70-Smoothwall-custom-disk.rules"
  (
    echo "# Smoothwall Express persistent device names"
    echo "# Auto-generated by installation program: `date`"
    echo
    echo "# hard drive's symlink"
    echo "SUBSYSTEM==\"block\",KERNEL==\"[hs]d*|cciss*\",ENV{DEVTYPE}==\"disk\",ENV{ID_SERIAL_SHORT}==\"${hd_id[$hd]}\", SYMLINK+=\"harddisk\""
    echo "SUBSYSTEM==\"block\",KERNEL==\"[hs]d*|cciss*\",ENV{DEVTYPE}==\"partition\",ENV{ID_SERIAL_SHORT}==\"${hd_id[$hd]}\", SYMLINK+=\"harddisk%n\""
    echo "SUBSYSTEM==\"block\",KERNEL==\"vd*\",ENV{DEVTYPE}==\"disk\",ENV{ID_SERIAL}==\"${hd_id[$hd]}\", SYMLINK+=\"harddisk\""
    echo "SUBSYSTEM==\"block\",KERNEL==\"vd*\",ENV{DEVTYPE}==\"partition\",ENV{ID_SERIAL}==\"${hd_id[$hd]}\", SYMLINK+=\"harddisk%n\""
    echo "SUBSYSTEM==\"block\",ENV{ID_BUS}==\"scsi\",KERNEL==\"sd*\",ENV{DEVTYPE}==\"disk\",ENV{ID_SERIAL_SHORT}==\"\",ENV{ID_SCSI}==\"${hd_id[$hd]}\", SYMLINK+=\"harddisk\""
    echo "SUBSYSTEM==\"block\",ENV{ID_BUS}==\"scsi\",KERNEL==\"sd*\",ENV{DEVTYPE}==\"partition\",ENV{ID_SERIAL_SHORT}==\"\",ENV{ID_SCSI}==\"${hd_id[$hd]}\", SYMLINK+=\"harddisk%n\""
    echo
    echo "# sdcard symlink"
    echo "SUBSYSTEM==\"block\",KERNEL==\"mmcblk*\", SUBSYSTEMS==\"mmc\",ENV{DEVTYPE}==\"disk\",ENV{ID_SERIAL}==\"${hd_id[$hd]}\", SYMLINK+=\"harddisk\""
    echo "SUBSYSTEM==\"block\",KERNEL==\"mmcblk*\", SUBSYSTEMS==\"mmc\",ENV{DEVTYPE}==\"partition\",ENV{ID_SERIAL}==\"${hd_id[$hd]}\", SYMLINK+=\"harddisk%n\""
    echo
    
  ) > /etc/udev/rules.d/70-Smoothwall-custom-disk.rules
  #cat /etc/udev/rules.d/70-Smoothwall-custom-disk.rules

  echo -e "${STEP}\n      Checking for 70-Smoothwall-custom-NIC.rules from rename_nic${NO}"
if [ -f /etc/udev/rules.d/70-Smoothwall-custom-NIC.rules ]; then
   echo -e "${DONE}          File 70-Smoothwall-custom-NIC.rules exists.${NO}"
else
   echo "File 70-Smoothwall-custom-NIC.rules does not exist."
   mv -v /etc/udev/rules.d/70-persistent-net.rules /etc/udev/rules.d/70-Smoothwall-custom-NIC.rules
   if grep wlan /etc/udev/rules.d/70-Smoothwall-custom-NIC.rules; then
     echo -e "${WARN}wlan* nic found${NO}"
     echo -e "${STEP}  Renaming wlan* NIC's to ethX${NO}"
     export MustShutDown=1
     . /etc/eth-addr-sort
   fi
fi
  #cat /etc/udev/rules.d/70-Smoothwall-custom-NIC.rules
  grep KERNEL /etc/udev/rules.d/70-Smoothwall-custom-NIC.rules
  echo
  grep brg /etc/udev/rules.d/99-Smoothwall-network-bridges.rules

  echo -e "${STEP}      Reload udev rules to pick up the new net/disk rules${NO}"
  /sbin/udevadm control --reload-rules

echo -e "${STEP}\n      Partition hard drive${NO}"
echo "Partition hard drive" >/dev/tty2
  typeset -i remainder bootsize swapsize rootsize logsize memsize
  typeset -i grubMiB bootMiB swapMiB rootMiB logMiB
  typeset -i grubstart bootstart swapstart rootstart logstart
  typeset -i grubend bootend swapend rootend logend
  typeset -i sTotal hw_sector_size unused unusedMiB

  # Get disk parameters
  hdd="${hd_dev[$hd]}"
  hw_sector_size=`cat /sys/block/$hdd/queue/hw_sector_size 2>/dev/null`
  if [ "$hw_sector_size" -eq 0 ]; then hw_sector_size=512; fi
  sTotal=`cat /sys/block/$hdd/size`
  sTotal=sTotal*$hw_sector_size/1024**2

  # Find out how much we're to use: all or part
  if [ $maxMiB -eq 0 ]; then
    remainder=$sTotal
    unused=0
  else
    remainder=$maxMiB
    unused=sTotal-remainder
  fi

  # Compute partition sizes
  #
  if grep mmc <<< "$hdd" 2>/dev/null; then
    hddp=${hdd}p
  else
    hddp=${hdd}
  fi

  # boot partition fixed size
  bootMiB=1024
  bootsize=bootMiB                   # 1024 MiB
  bootstart=3                        # 3 MiB
  bootend=bootstart+bootsize
  echo "  ${hddp}1  ${bootMiB}MiB -> /boot"

  # swap partition fixed size
  remainder=remainder-4            # less one MiB at each end, less 2MiB bios_grub
  compute_swap                     # swapsize is based on memory vs. disk size
  swapstart=bootend
  swapend=swapstart+swapsize
  echo "  ${hddp}2  ${swapMiB}MiB -> swap"

  # Conditional /var/log sizing
  remainder=remainder-bootsize-swapsize

  case $partSplit in
    1)
      # Traditional 2/3-1/3 split
      # log partition: 1/3 remainder
      logMiB=remainder/3
      # crowbar the log partition to 20MiB-20000MiB
      if [ $logMiB -lt 20 ]; then
        logMiB=20
      elif [ $logMiB -gt 20000 ]; then
        logMiB=20000
      fi
      logsize=logMiB
      logstart=swapend
      logend=logstart+logsize
      echo "  ${hddp}3  ${logMiB}MiB -> /log"
      ;;
    2)
      # Maximize /var/log
      logMiB=remainder-1024
      logsize=logMiB
      logstart=swapend
      logend=logstart+logsize
      echo "  ${hddp}3  ${logMiB}MiB -> /log"
      ;;
    3)
      # Minimize /var/log (1024miB)
      logMiB=1024
      logsize=logMiB
      logstart=swapend
      logend=logstart+logsize
      echo "  ${hddp}3  ${logMiB}MiB -> /log"

      # Maximize / (root)
      ;;
  esac

  # root partition: remainder
  remainder=remainder-logsize
  rootMiB=remainder
  rootsize=rootMiB
  rootstart=logend
  rootend=rootstart+rootsize
  echo "  ${hddp}4  ${rootMiB}MiB -> / (root)"

  # grub_bios partition: before /boot
#  grubMiB=2
#  grubsize=grubMiB
#  grubstart=1
#  grubend=grubstart+grubsize
#  echo "  ${hdd}5  ${grubMiB}MiB -> grub_bios"

  # all that's left
  remainder=remainder-rootsize
  unused=unused+remainder
  unusedMiB=unused
  echo "           ${unusedMiB}MiB -> (free space)"


  # prep the input
  echo -e "${BOUL}      Making msdos partition table on $hdd ${NO}"
  cat <<END >/tmp/partitions
unit MiB
select /dev/$hdd
mklabel msdos
mkpart primary fat32 $bootstart $bootend
set 1 boot on
mkpart primary linux-swap $swapstart $swapend
mkpart primary ext4 $logstart $logend
mkpart primary ext4 $rootstart $rootend
print
quit
END

  # Some day, these three lines will go back above the 'print' above.
  #mkpart bios_grub $grubstart $grubend
  #set 5 bios_grub on
  #name 5 "bios_grub"

# Single drive install, copy files to memory
if [ $hd_cnt -eq 1 ] || [ "${hd_dev[$hd]}" == "${cd_dev[$CD]}" ]; then
  echo -e "\n\n${BOUL}      Single drive install${NO}"
  if [[ "$hdd" =~ mmcblk[0-9]* ]]; then
    mount -v -t vfat /dev/${hdd}p1 /root -o rw
  else
    mount -v -t vfat /dev/${hdd}1 /root -o rw
  fi
  echo -e "${BOUL}      Copying files from $hdd to memory${NO}"
  cp -v /root/smo*.tgz* /cdrom
  if [ `ls /root | grep var` ] || [ `ls /root | grep total` ]; then
    cp -v /root/smo*.tar.* /cdrom
  fi

  if [ -f /root/*.conf ]; then
    echo -e "${BOUL}      Copying conf files from $hdd to memory${NO}"
    cp -v /root/*.conf /cdrom
  else
    echo "No conf files exist"
  fi

  if [ -f /root/oink.code ]; then
    echo -e "${BOUL}      Copying  files $hdd to memory${NO}"
    cp -v /root/oink.code /cdrom
  fi

  # wpa_supplicant.conf
  #if [ `ls /root/*.conf` ]; then
    cp -v /root/*.conf /cdrom
  #fi
  umount -v /root
  ls /cdrom
else
  echo -e "\n\n${BOUL}      Multiple drive install, mounting install files${NO}"
  if [[ "${cd_dev[$CD]}" =~ mmcblk[0-9]* ]]; then
    mount -v -t vfat /dev/${cd_dev[$CD]}p1 /cdrom -o rw
  else
    mount -v -t vfat /dev/${cd_dev[$CD]}1 /cdrom -o rw
  fi
fi

# First make udev remove any existing partition nodes in /dev.
  echo -e "\n${BOUL}      Zeroing beginning of drive $hdd${NO}"
  dd if=/dev/zero of=/dev/$hdd bs=1024k count=12
  echo "change" > /sys/block/$hdd/uevent
  /sbin/udevadm settle
  echo -e "${BOUL}      `ls /dev | grep $hdd`${NO}"
  sleep 2

# Now make the partitions
  echo -e "\n${BOUL}      Creating partitions on $hdd${NO}"
  #do_or_die "parted /dev/$hdd </tmp/partitions"
  parted /dev/$hdd </tmp/partitions
  echo "change" > /sys/block/$hdd/uevent
  /sbin/udevadm settle
  sleep 2

# Prepare filesystems
echo -e "\n${BOUL}      Prepare filesystems on $hdd${NO}"
#echo -e "${BOUL}      `ls /dev | grep $hdd`${NO}"

  echo -e "${BOUL}        /boot${NO}"
  mkdosfs -v -n BOOT /dev/harddisk1 || exit 1
  echo -e "${BOUL}        swap${NO}"
  mkswap -L "swap" /dev/harddisk2 || exit 1

  if [[ "$hdd" =~ mmcblk[0-9]* ]] || [[ ! `cat $hdd/sys/block/sda/queue/rotational` ]]; then
    echo -e "${INFO}      NON-rotational Format${NO}"
    MKFS="-O ^huge_file"
  else
    MKFS="-FFj"
  fi
  echo -e "${BOUL}        /var/log${NO}"
  echo "y" | mkfs.ext4 $MKFS -L "/var/log" /dev/harddisk3
  echo -e "${BOUL}        /${NO}"
  echo "y" | mkfs.ext4 $MKFS -L "/" /dev/harddisk4

echo -e "${BOUL}      Enabling swap${NO}"
  swapon -v /dev/harddisk2 || exit 1

# Mount the restore drive if restoring anything
if [ $restore -eq 2 -o $restore -eq 3 ]; then
  #rm -rf /restore
  if grep "${rd_dev[$rd]}" /proc/mounts >/dev/null 2>&1; then
    echo "Link cdrom to restore"
    # backups are on the source medium
    ln -s /cdrom /restore
  else
    echo "Mount restore drive"
    mkdir -p /restore
    RDMNTLOG="/tmp/rdmount.log"
    > $RDMNTLOG
    mount /dev/${rd_dev[$rd]}1  /restore -o ro >> $RDMNTLOG 2>&1
    if [ $? -ne 0 ]; then
      echo "Couldn't mount restore drive:"
      sed -e 's/^/  /' $RDMNTLOG
      echo
      echo "Press <ENTER> to reboot the system and try again."
      read a
      #reboot -f
      shutdown now -h
    fi
  fi
fi

# Mount new root filesystem
echo -e "\n${BOUL}      Mounting new filesystem ${harddisk}${NO}"
  echo -e "${BOUL}        root filesystem, harddisk4${NO}"
  mount -v -t ext4 /dev/harddisk4 /harddisk
  mkdir -vp -m 755 /harddisk/boot /harddisk/var/log
  echo -e "${BOUL}        boot filesystem, harddisk1${NO}"
  mount -v -t vfat /dev/harddisk1 /harddisk/boot
  echo -e "${BOUL}        var/log filesystem, harddisk3${NO}"
  mount -v -t ext4 /dev/harddisk3 /harddisk/var/log
  sleep 2


echo -e "\n${BOUL}      Prepare Smoothwall${NO}"
echo "restore is $restore"
echo "backupType is $backupType"
#exit 1

GRUB_CMD="/usr/sbin/grub-install"

# If installing or restoring var data
if [ $restore -eq 1 -o $restore -eq 2 ]; then
  echo -e "${STEP}      checking md5sum${NO}"
  if [ "$(md5sum /cdrom/smoothwall.tgz | awk '{print $1}')" == "$(cat /cdrom/smoothwall.tgz.md5sum | awk '{print $1}')" ]; then
    echo -e "${STEP}      unpack system${NO}"
    pv /cdrom/smoothwall.tgz | tar xzf - -C /harddisk || exit 1
  else
    echo -e "${OOPS}        Bad MD5 sum match${NO}"
    exit 1
  fi

  if [ $dev -eq 2 ]; then
    echo -e "${STEP}      unpack dev's${NO}"
    pv /cdrom/smoothdev.tgz | tar xzf - -C /harddisk

    echo -e "${STEP}      unpack doc's${NO}"
    pv /cdrom/smoothdoc.tgz | tar xzf - -C /harddisk
  fi

  echo -e "${STEP}      copy udev rules to target${NO}"
    mkdir -vp -m 755 /harddisk/etc/udev/rules.d
    cp -v /etc/udev/rules.d/*-Smoothwall* /harddisk/etc/udev/rules.d/
    #cp -v /etc/udev/rules.d/70-Smoothwall* /harddisk/etc/udev/rules.d/
    #cat /etc/udev/rules.d/70-Smoothwall-custom-NIC.rules
    ls /harddisk/etc/udev/rules.d

  echo -e "${STEP}      create /harddisk/etc/fstab${NO}"
  (
    echo "proc            /proc           proc            defaults        0       0"
    echo "sys             /sys            sysfs           defaults        0       0"
    echo "dev             /dev            devtmpfs        defaults        0       0"
    echo "devpts          /dev/pts        devpts          defaults        0       0"
    echo "/dev/harddisk2  none            swap            sw              0       0"
    echo
    echo "/dev/harddisk4  /               ext4         defaults,noatime   0       1"
    echo "/dev/harddisk1  /boot           vfat         defaults           0       2"
    echo "/dev/harddisk3  /var/log        ext4         defaults,noatime   0       2"
  ) >/harddisk/etc/fstab
  cat /harddisk/etc/fstab

  echo -e "${STEP}      create /harddisk/etc/modules${NO}"
  echo "ext4" >/harddisk/etc/modules
  echo "vfat" >>/harddisk/etc/modules
  if [ "$BRIDGE" == "on" ]; then
    echo -e "${STEP}        adding br_netfilter module ${NO}"
    echo "bridge" >>/harddisk/etc/modules
    echo "br_netfilter" >>/harddisk/etc/modules
  fi

  if [ "$rpisys" == "BCM2835" ]; then
    echo -e "${STEP}        adding pi modules${NO}"
    #echo "" >> /harddisk/etc/modules
    #echo "snd-bcm2835" >>/harddisk/etc/modules
    echo "bcm2835-rng" >>/harddisk/etc/modules
    if [ "$I2C_DEV" == "on" ]; then
      echo "i2c-dev" >> /harddisk/etc/modules
    fi
  else
    echo -e "${STEP}        no extra modules${NO}"
  fi
  echo -e "${DONE}          harddisk modules ${INFO}are${NO}"
  cat /harddisk/etc/modules

  echo -e "${STEP}      create /harddisk/etc/mtab${NO}"
  >/harddisk/etc/mtab; chmod 644 /harddisk/etc/mtab

  echo -e "${STEP}      as chroot, mount proc, sys, dev${NO}"
  chroot /harddisk /bin/mount -v -f /proc
  chroot /harddisk /bin/mount -v -f /sys
  chroot /harddisk /bin/mount -v -f /dev
  chroot /harddisk /bin/mount -v -a -f
  
  echo -e "${STEP}      save configs and settings${NO}"
  cat <<END > /harddisk/$CONFIG_ROOT/main/hwprofile
STORAGE_DEVNODE=harddisk
CDROM_DEVNODE=${cd_dev[$CD]}
FS=ext4
END

cat /harddisk/$CONFIG_ROOT/main/hwprofile
  uname -r >/harddisk/$CONFIG_ROOT/main/kernel
cat /harddisk/$CONFIG_ROOT/main/kernel
  cat <<END >/harddisk/$CONFIG_ROOT/main/settings
LANGUAGE=en
HOSTNAME=smoothwall
KEYMAP=/usr/share/keymaps/i386/qwerty/uk.map.gz
OPENNESS=halfopen
END
cat /harddisk/$CONFIG_ROOT/main/settings
  chown -v nobody:nobody /harddisk/$CONFIG_ROOT/main/settings
  chmod -v 664 /harddisk/$CONFIG_ROOT/main/settings

  cat <<END >/harddisk/$CONFIG_ROOT/time/settings
TIMEZONE=UTC
END

  cat /harddisk/$CONFIG_ROOT/time/settings

  echo -e "${STEP}      prep module dependencies, chroot /harddisk${NO}"
  echo -e "${DONE}          modules ${INFO}are${NO}"
  cat /harddisk/etc/modules
  chroot /harddisk /sbin/depmod -a

  if [ "$serialport" == "2" ] || [ "$serialport" == "3" ]; then
    echo "  enable getty on ttyS0"
    sed -i -e '/^S0/ s/off/respawn/' -e '/^S0/ s/115200/'$BAUD'/' /harddisk/etc/inittab
  fi

  echo -e "${STEP}    Adjust runtime initramfs${NO}"
  set -- $FS
  FSTYPE=$3
  if [ "$FSTYPE" == "reiserfs" ]; then
    OPTION="notail$ATIME        "
  else
    OPTION="defaults$ATIME"
  fi

  OPWD=`pwd`
  HDTMP="/harddisk/runtimeroot"
  mkdir -p $HDTMP; cd $HDTMP
  echo -e "${STEP}    unpack${NO}"
  gunzip -c /harddisk/boot/initrd-${KERNEL_VER}${KERNEL_TYPE}.gz | cpio -id
  echo -e "${STEP}    update${NO}"
  mkdir -vp -m 755 ${HDTMP}/etc/udev/rules.d
  cp -v /etc/udev/rules.d/70-Smoothwall* ${HDTMP}/etc/udev/rules.d/

  echo "/dev/harddisk4	/harddisk	ext4	defaults,noatime	0	1" >${HDTMP}/etc/fstab
cat ${HDTMP}/etc/fstab
  
  echo -e "${STEP}      copy /harddisk/etc/modules to ${HDTMP}/etc/modules${NO}"
  cp -av /harddisk/etc/modules ${HDTMP}/etc/modules
  echo -e "${DONE}          ${HDTMP} modules ${INFO}are${NO}"
  cat ${HDTMP}/etc/modules

  echo -e "${STEP}    As chroot ${HDTMP}, depmod -a${NO}"
  chroot ${HDTMP} /sbin/depmod -a

  echo -e "${STEP}    re-pack${NO}"
  (cd ${HDTMP}; \
      find . | /bin/cpio -o -H newc | /usr/bin/gzip > /harddisk/boot/initrd-${KERNEL_VER}${KERNEL_TYPE}.gz)
  chmod -v 444 /harddisk/boot/initrd-${KERNEL_VER}${KERNEL_TYPE}.gz
  cd ${OPWD}
  rm -rf ${HDTMP}

  # Restore variable data if selected. AND upgrade files as needed!
  if [ $restore -eq 2 ]; then
    # Save the fresh files
    (
      cd /harddisk/etc
      for file in passwd group shadow snort.conf; do
        # Copy these; UNIX don't like not having them
        cp $file $file-FRESH
      done
    )
    (
      cd /harddisk/etc/udev/rules.d
      mv 70-Smoothwall-custom-disk.rules 70-Smoothwall-custom-disk.rules-FRESH
      mv 70-Smoothwall-custom-NIC.rules 70-Smoothwall-custom-NIC.rules-FRESH
    )
    (
      cd /harddisk/var/smoothwall/main;
      mv productdata productdata-FRESH
      mv settings settings-FRESH
    )
    (
      cd /harddisk/var/smoothwall/patches;
      mv installed installed-FRESH
    )
    (
      cd /harddisk/var/smoothwall/outgoing
      mv config config-FRESH
    )

    # Restore var data
    echo "  Restore variable data from backup"
    do_or_die "tar -C /harddisk -zxvf /restore/${archive_id[$archive]}"

    tidyBackupDir var

    echo "  Upgrade variable data files"
    # upgrade main
    (
      cd /harddisk/var/smoothwall/main;
      cp productdata productdata-RESTORED
      cp productdata-FRESH productdata
      cp settings settings-RESTORED
      cp settings-FRESH settings
    )
    # upgrade patches
    (
      cd /harddisk/var/smoothwall/patches;
      cp installed installed-RESTORED
      cp installed-FRESH installed
    )

    # Upgrade udev rules
    # We don't need to deal with initramfs, since it's all new. Just check if
    #   the NICs have changed.
    OPWD=${PWD}
    cd /harddisk/etc/udev/rules.d
    # If the MAC addrs changed, force setup to run
    grep SUBSYSTEM /etc/udev/rules.d/70-Smoothwall-custom-NIC.rules | \
        sed -e 's/.*address}=="//' -e 's/", ATTR{dev_id.*//' | \
        sort > /tmp/newNICs
    grep SUBSYSTEM /harddisk/etc/udev/rules.d/70-Smoothwall-custom-NIC.rules | \
        sed -e 's/.*address}=="//' -e 's/", ATTR{dev_id.*//' | \
        sort > /tmp/oldNICs
    if ! diff /tmp/newNICs /tmp/oldNICs >/dev/null 2>&1; then mustRunSetup=1; fi
    # And restore the new rules
    mv 70-Smoothwall-custom-disk.rules-FRESH 70-Smoothwall-custom-disk.rules
    mv 70-Smoothwall-custom-NIC.rules-FRESH 70-Smoothwall-custom-NIC.rules
    cd ${OPWD}

    # Upgrade /etc files (retain user modifications)
    (
      cd /harddisk/etc
      # Save the restored files
      for file in passwd group shadow snort.conf; do
        cp $file $file-RESTORED
      done

      # Upgrade them
      (
        egrep "fuse|plugdev|scanner|kvm|usbmux" group-FRESH
        egrep -v "fuse|plugdev|scanner|kvm|usbmux" group-RESTORED
      ) | sort -n -t: -k 3,3 >group
      (
        egrep "usbmux" passwd-FRESH
        egrep -v "usbmux" passwd-RESTORED
      ) | sort -n -t: -k 3,3 >passwd
      # DON'T sort shadow
      (
        egrep -v "usbmux" shadow-RESTORED
        egrep "usbmux" shadow-FRESH
      ) >shadow
      cp snort.conf-FRESH snort.conf
      echo "    /etc/snort.conf upgraded; the original has been saved to snort.conf-RESTORED."
      echo "    If you made any local changes, you must copy them to the new file."
      sleep 3
    )

    # Upgrade .../outgoing/config
    #(
    #  cd /harddisk/var/smoothwall/outgoing
    #  cp config config-RESTORED
    #  cp /etc/upgrade-outgoing.{pl,sh} /harddisk/tmp/

    #  # Run the update script; chroot to get perl
    #  chroot /harddisk bash /tmp/upgrade-outgoing.sh
    #)

    # Update .../main/settings
    (
      cd /harddisk/var/smoothwall/main
      . settings-RESTORED
      LANGUAGErestored=$LANGUAGE
      HOSTNAMErestored=$HOSTNAME
      KEYMAPrestored=$KEYMAP
      OPENNESSrestored=$OPENNESS
      . settings-FRESH
      cat<<END > settings
LANGUAGE=$LANGUAGErestored
HOSTNAME=$HOSTNAMErestored
KEYMAP=$KEYMAPrestored
OPENNESS=$OPENNESSrestored
END
      chown nobody:nobody /harddisk/$CONFIG_ROOT/main/settings
      chmod 664 /harddisk/$CONFIG_ROOT/main/settings
    )

    # Sweep the detritus under the rug
    (cd /harddisk/etc; rm -f {passwd,group,shadow}-{RESTORED,FRESH})
    (cd /harddisk/var/smoothwall/main; rm -f *-{RESTORED,FRESH})
    (cd /harddisk/var/smoothwall/patches; rm -f *-{RESTORED,FRESH})
    (cd /harddisk/var/smoothwall/outgoing; rm -f *-{RESTORED,FRESH})
    (cd /tmp/; rm -f upgrade-outgoing*)
    GRUB_CMD="$GRUB_CMD --recheck"
  fi

else

  # Performing a total restore
  echo "  Restore complete system from backup"
  #do_or_die "tar -C /harddisk -zxvf /restore/${archive_id[$archive]}"
  pv /cdrom/${archive_id[$archive]} | tar xzf - -C /harddisk
exit 1
  tidyBackupDir total

  # Adjust the initramfs as needed (different disk, NICs or FS, etc.)
  KERNEL_VER=`ls -C1 /harddisk/boot/initrd*gz | tail -1 | sed -e 's/.*initrd-//' -e 's/'${KERNEL_TYPE}'\.gz//'`
  echo "  adjusting runtime initramfs"
  set -- $FS
  FSTYPE=$3
  if [ "$FSTYPE" == "reiserfs" ]; then
    OPTION="notail$ATIME        "
  else
    OPTION="defaults$ATIME"
  fi

  OPWD=`pwd`
  HDTMP="/harddisk/runtimeroot"
  mkdir -p $HDTMP; cd $HDTMP
  echo "    unpack"
  do_or_die "gunzip -c /harddisk/boot/initrd-${KERNEL_VER}${KERNEL_TYPE}.gz | cpio -id"
  echo "    update"
  do_or_die "mkdir -p -m 755 ${HDTMP}/etc/udev/rules.d"
  do_or_die "cp -v /etc/udev/rules.d/*Smoothwall* ${HDTMP}/etc/udev/rules.d/"

  echo "/dev/harddisk4  /harddisk       $FSTYPE $OPTION         0       1" >${HDTMP}/etc/fstab
  echo "$FSTYPE" >${HDTMP}/etc/modules

  echo "    re-pack"
  do_or_die "cd ${HDTMP}; find . | /bin/cpio -o -H newc | /usr/bin/gzip > /harddisk/boot/initrd-${KERNEL_VER}${KERNEL_TYPE}.gz"
  do_or_die "chmod 444 /harddisk/boot/initrd-${KERNEL_VER}${KERNEL_TYPE}.gz"
  cd ${OPWD}
  rm -rf ${HDTMP}

  # Also update udev rules, fstab and modules on harddisk
  # And ensure setup is run if the NICs have changed
  grep SUBSYSTEM /etc/udev/rules.d/*Smoothwall*NIC* | \
      sed -e 's/.*address}=="//' -e 's/", ATTR{dev_id.*//' | \
      sort > /tmp/newNICs
  grep SUBSYSTEM /harddisk/etc/udev/rules.d/*Smoothwall*NIC* | \
      sed -e 's/.*address}=="//' -e 's/", ATTR{dev_id.*//' | \
      sort > /tmp/oldNICs
  if ! diff /tmp/newNICs /tmp/oldNICs >/dev/null 2>&1; then mustRunSetup=1; fi
  do_or_die "cp -v /etc/udev/rules.d/*Smoothwall* /harddisk/etc/udev/rules.d/"
  sed -i -e 's=/ .*=/               '$FSTYPE' '$OPTION'         0       1=' \
         -e 's=/boot.*=/boot           '$FSTYPE' defaults'$ATIME'         0       2=' \
         -e 's=/var/log.*=/var/log        '$FSTYPE' defaults'$ATIME'         0       2=' \
      /harddisk/etc/fstab
  sed -i -e 's/reiserfs\|ext./'$FSTYPE'/' /harddisk/etc/modules

  # Sweep some backup crumbs under the rug
  rm -f /harddisk/boot/grub/device.map  # map might've changed
  > /harddisk/etc/mtab                  # It's wrong anyway
  chroot /harddisk mount -f -a          # Make it match 'now'

  GRUB_CMD="$GRUB_CMD --recheck"
fi

# reMount harddisk
echo -e "${STEP}      reMount harddisk as a system${NO}"
mount -v --rbind /proc /harddisk/proc
mount -v --rbind /sys /harddisk/sys
mount -v --rbind /dev /harddisk/dev

x86sys=$(uname -m)
echo "x86sys is $x86sys"
rpisys=$(cat /proc/cpuinfo | grep BCM | awk '{print $3}')
echo "rpisys is $rpisys"

echo "Sleepy 2"
sleep 2

if [ "$x86sys" == "i586" ] || [ "$x86sys" == "i686" ] || [ "$x86sys" == "x86_64" ]; then
  echo -e "${WARN}          x86 install${NO}"
  echo -e "${STEP}      Configure grub${NO}"

  # Always install the boot loader whether installing, restoring var or
  #   doing a total restore
  cp -v /cdrom/boot/grub/express_boot_protect.xpm.gz /harddisk/boot/grub/
  cat > /harddisk/boot/grub/grub.conf <<END
# Begin /boot/grub/grub.conf

# Set up to output to both VGA console and serial port; grub'll
#   use the first one to see a keypress. Or it'll time out and
#   use the default from installation (the first one in the command).
#   Change the order of them if you manually change between serial
#   and vesa.

serial --unit=0 --speed=$BAUD
END

  if [ "$serialport" == "1" ] || [ "$serialport" == "3" ]; then
    cat >> /harddisk/boot/grub/grub.conf <<END
terminal --timeout=5 serial console

# Boot using serial console by default
default 1
END
  else
    cat >> /harddisk/boot/grub/grub.conf <<END
terminal --timeout=5 console serial

# Boot using VESA console
default 0
END
  fi

  cat >> /harddisk/boot/grub/grub.conf <<END

# Allow 5 seconds before booting the default.
timeout 5

# Official backdrop
splashimage=/grub/express_boot_protect.xpm.gz
foreground=cfcfcf
background=222222

# Boot using VESA console
title Smoothwall Express (VESA Console)
root (hd0,0)
kernel /vmlinuz-${KERNEL_VER}${KERNEL_TYPE} root=/dev/harddisk4 ro quiet
initrd /initrd-${KERNEL_VER}${KERNEL_TYPE}.gz

# Boot using serial console
title Smoothwall Express (Serial Console)
root (hd0,0)
kernel /vmlinuz-${KERNEL_VER}${KERNEL_TYPE} root=/dev/harddisk4 ro quiet console=ttyS0,$BAUD
initrd /initrd-${KERNEL_VER}${KERNEL_TYPE}.gz

# Try to boot VESA console using kernel params to work around odd hardware/firmware
title Smoothwall Express (VESA Console, Odd Hardware)
root (hd0,0)
kernel /vmlinuz-${KERNEL_VER}${KERNEL_TYPE} root=/dev/harddisk4 ro quiet iommu=soft nomodeset
initrd /initrd-${KERNEL_VER}${KERNEL_TYPE}.gz

# Try to boot serial console using kernel params to work around odd hardware/firmware
title Smoothwall Express (Serial Console, Odd Hardware)
root (hd0,0)
kernel /vmlinuz-${KERNEL_VER}${KERNEL_TYPE} root=/dev/harddisk4 ro quiet console=ttyS0,$BAUD iommu=soft
initrd /initrd-${KERNEL_VER}${KERNEL_TYPE}.gz
END

  cat<<END >/harddisk/tmp/grub.cmds
device (hd0) /dev/harddisk
root (hd0,0) 
setup (hd0) 
quit
END

  echo -e "${STEP}      Install grub${NO}"
  #do_or_die "/sbin/chroot /harddisk /usr/sbin/grub --batch </harddisk/tmp/grub.cmds"
  chroot /harddisk /usr/sbin/grub --batch </harddisk/tmp/grub.cmds

  echo -e "${BOUL}          Done ${WARN}x86 ${BOUL}install${NO}"

# ###########  end x86  ############################################################

elif [ "$rpisys" == "BCM2835" ] || [ "$x86sys" == "aarch64" ]; then
  echo -e "${WARN}          Raspberry Pi install${NO}"
  echo -e "${STEP}            Create cmdline.txt && config.txt${NO}"
  cd /harddisk/boot; \
    cp -v cmdline.txt.normal cmdline.txt ;\
    cp -v config.txt.normal config.txt
  #echo -e "${STEP}              Enabling Sound${NO}"
  #echo "" >> /harddisk/boot/config.txt
  #echo "dtparam=audio=on" >> /harddisk/boot/config.txt
    
  if [[ "$hdd" =~ sda[0-9]* ]]; then
    echo -e "${STEP}      sda boot device${NO}"
    sed -e 's@mmcblk0p@sda@' /harddisk/boot/cmdline.txt
    echo "" >> /harddisk/boot/config.txt
    echo "dtoverlay=sdtweak,poll_once=on" >> /harddisk/boot/config.txt
  fi
  if [ "$I2C_DEV" == "on" ]; then
    echo -e "${STEP}          Enabling i2c Time${NO}"
    echo "" >> /harddisk/boot/config.txt
    echo "dtparam=i2c_arm=on" >> /harddisk/boot/config.txt
    echo "dtoverlay=i2c-rtc,$I2C_rtc" >> /harddisk/boot/config.txt
    mkdir -v /harddisk/var/smoothwall/clock
    echo "$I2C_rtc" > /harddisk/var/smoothwall/clock/clock
  fi

  echo -e "${LTBL}          Done ${WARN}Raspberry Pi ${BOUL}install${NO}"

else
  echo -e "${OOPS}          unsupported install${NO}"
  exit 1
fi


# Build smoothwall ethernet settings

# Set Country_Code
case $country_code in
  1) echo "Country_Code=US" >> /harddisk/var/smoothwall/ethernet/settings;;
  2) echo "Country_Code=UK" >> /harddisk/var/smoothwall/ethernet/settings;;
  3) echo "Country_Code=DE" >> /harddisk/var/smoothwall/ethernet/settings;;
  *) echo "Country_Code=$country_code" >> /harddisk/var/smoothwall/ethernet/settings;;
esac

echo "BRIDGE=$BRIDGE" >> /harddisk/var/smoothwall/ethernet/settings
echo "GREEN_BRG=$GREEN_BRG" >> /harddisk/var/smoothwall/ethernet/settings
echo "ORANGE_BRG=$ORANGE_BRG" >> /harddisk/var/smoothwall/ethernet/settings
echo "PURPLE_BRG=$PURPLE_BRG" >> /harddisk/var/smoothwall/ethernet/settings

if [ "$AP" == "ok" ]; then
  echo "WIFI=on" >> /harddisk/var/smoothwall/ethernet/settings
  echo "AP=$AP" >> /harddisk/var/smoothwall/ethernet/settings
  echo -e "${BOUL}        Setting up hostapd  ${NO}"
  if [ ! -v $GREEN_WIFI ]; then 
	echo -e "${LTBL}              Setting GREEN_BRG to $GREEN_BRG, and $GREEN_BRG_DEV as primary${NO}"
	echo "GREEN_BRG_DEV=$GREEN_BRG_DEV" >> /harddisk/var/smoothwall/ethernet/settings
	echo "GREEN_WIFI=$GREEN_WIFI" >> /harddisk/var/smoothwall/ethernet/settings
	echo "GREEN_BRG_MAC=$GREEN_BRG_MAC" >> /harddisk/var/smoothwall/ethernet/settings
  fi
  if [ ! -v $ORANGE_WIFI ]; then 
	echo -e "${LTBL}              Setting ORANGE_BRG to $ORANGE_BRG, and $ORANGE_BRG_DEV as primary${NO}"
	echo "ORANGE_BRG_DEV=$ORANGE_BRG_DEV" >> /harddisk/var/smoothwall/ethernet/settings
	echo "ORANGE_WIFI=$ORANGE_WIFI" >> /harddisk/var/smoothwall/ethernet/settings
	echo "ORANGE_BRG_MAC=$ORANGE_BRG_MAC" >> /harddisk/var/smoothwall/ethernet/settings
  fi
  if [ ! -v $PURPLE_WIFI ]; then 
	echo -e "${LTBL}              Setting PURPLE_BRG to $PURPLE_BRG, and $PURPLE_BRG_DEV as primary${NO}"
	echo "PURPLE_BRG_DEV=$PURPLE_BRG_DEV" >> /harddisk/var/smoothwall/ethernet/settings
	echo "PURPLE_WIFI=$PURPLE_WIFI" >> /harddisk/var/smoothwall/ethernet/settings
	echo "PURPLE_BRG_MAC=$PURPLE_BRG_MAC" >> /harddisk/var/smoothwall/ethernet/settings
  fi
  
  echo -e "${BOUL}        Searching for wlan's ${NO}"
  if [ -v "Wlan0" ]; then
    echo -e "${STEP}          Found Wlan0 = $Wlan0  ${NO}"
    echo "Wlan0=$Wlan0" >> /harddisk/var/smoothwall/ethernet/settings
  fi
  if [ -v "Wlan1" ]; then
    echo -e "${STEP}          Found Wlan1 = $Wlan1  ${NO}"
    echo "Wlan1=$Wlan1" >> /harddisk/var/smoothwall/ethernet/settings
  fi
  if [ -v "Wlan2" ]; then
    echo -e "${STEP}          Found Wlan2 = $Wlan2  ${NO}"
    echo "Wlan2=$Wlan2" >> /harddisk/var/smoothwall/ethernet/settings
  fi
  if [ -v "Wlan3" ]; then
    echo -e "${STEP}          Found Wlan3 = $Wlan3  ${NO}"
    echo "Wlan3=$Wlan3" >> /harddisk/var/smoothwall/ethernet/settings
  fi
  if [ -v "Wlan4" ]; then
    echo -e "${STEP}          Found Wlan4 = $Wlan4  ${NO}"
    echo "Wlan4=$Wlan4" >> /harddisk/var/smoothwall/ethernet/settings
  fi
  if [ -v "Wlan5" ]; then
    echo -e "${STEP}          Found Wlan5 = $Wlan5  ${NO}"
    echo "Wlan5=$Wlan5" >> /harddisk/var/smoothwall/ethernet/settings
  fi
  if [ -v "Wlan6" ]; then
    echo -e "${STEP}          Found Wlan6 = $Wlan6  ${NO}"
    echo "Wlan6=$Wlan6" >> /harddisk/var/smoothwall/ethernet/settings
  fi

  echo "bridge_client=on" >> /harddisk/var/smoothwall/ethernet/settings
  echo "hostapd_client=on" >> /harddisk/var/smoothwall/ethernet/settings
  echo "Next_NIC=$NEXT_NIC" >> /harddisk/var/smoothwall/ethernet/settings
fi

if [ "$WPA_CLIENT" == "on" ]; then
  echo -e "${BOUL}        Setting WPA_CLIENT on ${NO}"
  echo "WPA_CLIENT=on" >> /harddisk/var/smoothwall/ethernet/settings
fi

cat /harddisk/var/smoothwall/ethernet/settings > /harddisk/root/settings.orig


# Copy files
echo -e "${BOUL}        Copy config files${NO}"

if [ -f /cdrom/wpa_supplicant.conf ]; then
  # Debian root:root 0644
  cp -v /cdrom/wpa_supplicant.conf /harddisk/etc/wpa_supplicant/wpa_supplicant.conf
  chown -v nobody:nobody /harddisk/etc/wpa_supplicant/wpa_supplicant.conf
  chmod -v 644 /harddisk/etc/wpa_supplicant/wpa_supplicant.conf
fi

if [ -f /cdrom/hostapd.green.conf ]; then
  cp -v /cdrom/hostapd.green.conf /harddisk/etc/hostapd/hostapd.green.conf
fi

if [ -f /cdrom/hostapd.orange.conf ]; then
  cp -v /cdrom/hostapd.orange.conf /harddisk/etc/hostapd/hostapd.orange.conf
fi

if [ -f /cdrom/hostapd.purple.conf ]; then
  cp -v /cdrom/hostapd.purple.conf /harddisk/etc/hostapd/hostapd.purple.conf
fi

if [ -f /cdrom/oink.code ]; then
  cp -v /harddisk/var/smoothwall/snort/settings /harddisk/var/smoothwall/snort/settings.orig
  cp -v /cdrom/oink.code /harddisk/var/smoothwall/snort/settings
  # nobody [99]:nobody [99]  0664
  chown -v nobody:nobody /harddisk/var/smoothwall/snort/settings
  chmod -v 644 /harddisk/var/smoothwall/snort/settings
fi

if [ -f /cdrom/snort.conf ]; then
  cp -v /harddisk/etc/snort.conf /harddisk/etc/snort.conf.orig
  cp -v /cdrom/snort.conf /harddisk/etc/snort.conf
  # root [0]:root [0]  0644
fi

if [ -f /cdrom/ppp.settings-1.conf ]; then
  cp -v /harddisk/var/smoothwall/ppp/settings-1 /harddisk/var/smoothwall/ppp/settings-1.orig
  cp -v /cdrom/ppp.settings-1.conf > /harddisk/var/smoothwall/ppp/settings-1
  # nobody [99]:nobody [99]  0664
  chown -v nobody:nobody /harddisk/var/smoothwall/ppp/settings-1
  chmod -v 644 /harddisk/var/smoothwall/ppp/settings-1
fi

if [ -f /cdrom/ppp.secrets.conf ]; then
  cp -v /harddisk/var/smoothwall/ppp/secrets /harddisk/var/smoothwall/ppp/secrets.orig
  cp -v /cdrom/ppp.secrets.conf /harddisk/var/smoothwall/ppp/secrets
  # nobody [99]:nobody [99]  0600
  chown -v nobody:nobody /harddisk/var/smoothwall/ppp/secrets
  chmod -v 600 /harddisk/var/smoothwall/ppp/secrets
fi

echo -e "${DONE}    Finished exec-install.rc, ${STEP}sleepy 4${NO}"
sleep 4

