# SmoothWall Build system.
#
# (c) SmoothWall Ltd 2005
#
# This code is distributed under the terms of the GPL v2.

ifndef DOWNLOAD
download:
	@$(PRE_DL) $(DL_CMD) $(BASE_URL)/$(TARBALL)$(EXTENSION) $(MD5)
ifdef PATCH_URL1
	@$(DL_CMD) $(PATCH_URL1) $(PATCH_MD51)
endif
ifdef PATCH_URL2
	@$(DL_CMD) $(PATCH_URL2) $(PATCH_MD52)
endif
ifdef PATCH_URL3
	@$(DL_CMD) $(PATCH_URL3) $(PATCH_MD53)
endif
ifdef PATCH_URL4
	@$(DL_CMD) $(PATCH_URL4) $(PATCH_MD54)
endif
ifdef PATCH_URL5
	@$(DL_CMD) $(PATCH_URL5) $(PATCH_MD55)
endif
endif

ifndef PREPARE
$(DIR)/: download
	tar -xvf $(DOWNLOADS_DIR)/$(TARBALL)$(EXTENSION)
endif

ifndef PATCH
patch: $(DIR)/
	for PATCH in $(PATCH_URL1) $(PATCH_URL2) $(PATCH_URL3) $(PATCH_URL4) $(PATCH_URL5); do \
	  FILENAME=$(DOWNLOADS_DIR)/`basename $$PATCH`; \
	  cp $$FILENAME ./; \
	done; \
	(cd $(DIR); \
	for PATCH in $(PATCH_FILE1) $(PATCH_FILE2) $(PATCH_FILE3) $(PATCH_FILE4) $(PATCH_FILE5); do \
	  FILENAME=../$$PATCH; \
	  [ -f $$FILENAME ] || exit 8; \
	  if echo $$FILENAME | grep -q \.gz$$; then \
	    zcat $$FILENAME | patch -p1 || exit 10; \
	  elif echo $$FILENAME | grep -q \.bz2$$; then \
	    bzcat $$FILENAME | patch -p1 || exit 12; \
	  else \
	    cat $$FILENAME | patch -p1 || exit 14; \
	  fi; \
	done;)
endif

ifndef CONFIGURE
configure: patch
	(if [ ! -e $(COMPILE_DIR) ]; then mkdir $(COMPILE_DIR); fi)
ifneq ($(DIR), $(COMPILE_DIR))
	(cd $(COMPILE_DIR); CXXFLAGS="$(CFLAGS)" CFLAGS="$(CFLAGS)" $(PRE_CONFIGURE) ../$(DIR)/configure --prefix=$(PKG_DIR) $(CONFIG_OPTS))
else
	(cd $(COMPILE_DIR); CXXFLAGS="$(CFLAGS)" CFLAGS="$(CFLAGS)" $(PRE_CONFIGURE) ./configure --prefix=$(PKG_DIR) $(CONFIG_OPTS))
endif
endif

ifndef COMPILE
compile: configure
	+$(PRE_COMPILE) $(MAKE) ${JOBS} -C $(COMPILE_DIR)
endif

ifndef RECOMPILE
recompile: 
	+$(MAKE) ${JOBS} -C $(COMPILE_DIR)
endif

ifndef INSTALL
install: compile
	mkdir -p $(PKG_ROOT)
	+$(MAKE) -C $(COMPILE_DIR) DESTDIR=$(PKG_ROOT) install
endif

ifndef BUILDTARBALL
$(TARGET_DIR)/smoothwall-$(PACKAGE).tar.gz: install
	tar -zcvf $(TARGET_DIR)/smoothwall-$(PACKAGE).tar.gz -C $(PKG_ROOT) .
	tar -zxvf $(TARGET_DIR)/smoothwall-$(PACKAGE).tar.gz -C /
endif

ifndef CLEAN
clean:
	@echo -n " $(PACKAGE)"
	@rm -rf $(DIR)
	@rm -rf $(COMPILE_DIR)
ifeq ($(BUILD_PHASE), Final)
	@rm -rf $(PKG_ROOT); mkdir -p $(PKG_ROOT)
ifeq ($(BITS_64), yes)
	mkdir -p $(PKG_ROOT)/{lib,usr/lib}
	@cd $(PKG_ROOT); ln -s lib lib64
	@cd $(PKG_ROOT)/usr; ln -s lib lib64
endif
	@rm -f $(TARGET_DIR)/smoothwall-$(PACKAGE).tar.gz
endif
endif

ifndef PACKAGEINFO
packageinfo.html:
	@echo "<li><span style='font-size:large;'>$(PACKAGE) $(VERSION)</span><br>" >>/tmp/packageinfo.html
	@cp -avR $(DOWNLOADS_DIR)/$(TARBALL)$(EXTENSION) /tmp/downloads
	@echo "Download: <a href='$(BASE_URL)$(TARBALL)$(EXTENSION)'>$(BASE_URL)$(TARBALL)$(EXTENSION)</a>" >>/tmp/packageinfo.html
	@echo "(<a href='downloads/$(TARBALL)$(EXTENSION)'>Local mirror</a>)<br>" >>/tmp/packageinfo.html
	@echo "Patches:" >>/tmp/packageinfo.html
	@echo "<ul>" >>/tmp/packageinfo.html
	@(for PATCH in $(PATCH_FILE1) $(PATCH_FILE2) $(PATCH_FILE3) $(PATCH_FILE4) $(PATCH_FILE5); do \
		echo "<li><a href='downloads/$$PATCH'>$$PATCH</a>" >>/tmp/packageinfo.html; \
		cp -avR $(ROOT)/build/sources/$(PACKAGE)/$$PATCH /tmp/downloads; \
	done); exit 0
	@echo "</ul>" >>/tmp/packageinfo.html

endif

ifndef ALL
all: $(TARGET_DIR)/smoothwall-$(PACKAGE).tar.gz
endif
