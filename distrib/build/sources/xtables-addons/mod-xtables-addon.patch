diff -Nurb xtables-addons-1.19.orig/extensions/libxt_mod.c xtables-addons-1.19/extensions/libxt_mod.c
--- xtables-addons-1.19.orig/extensions/libxt_mod.c	1970-01-01 01:00:00.000000000 +0100
+++ xtables-addons-1.19/extensions/libxt_mod.c	2010-10-14 14:23:29.000000000 +0100
@@ -0,0 +1,181 @@
+/* Shared library add-on to iptables to add port modulus support. */
+#include <stdio.h>
+#include <netdb.h>
+#include <string.h>
+#include <stdlib.h>
+#include <getopt.h>
+
+#include <xtables.h>
+#include <linux/netfilter/x_tables.h>
+
+#include "xt_mod.h"
+
+/* Function which prints out usage message. */
+static void
+help(void)
+{
+	printf(
+"mod match options:\n"
+"    --src-mod-port       Match source port\n"
+"    --dst-mod-port       Match destination port\n"
+"    --src-mod-addr       Match source address\n"
+"    --dst-mod-addr       Match destination address\n"
+"    --mod                Sets the modulus (default 2)\n"
+"    --result             Sets the low band result to test against (default 0)\n"
+"    --weight             Sets the weighting (default 1)\n"
+"\n");
+}
+
+static const struct option opts[] = {
+	{ "src-mod-port", 0, 0, '1' },
+	{ "dst-mod-port", 0, 0, '2' },
+	{ "src-mod-addr", 0, 0, '3' },
+	{ "dst-mod-addr", 0, 0, '4' },
+	{ "mod",          1, 0, '5' },
+	{ "result",       1, 0, '6' },
+	{ "weight",       1, 0, '7' },
+	{0}
+};
+
+/* Initialize the match. */
+static void
+init(struct xt_entry_match *m)
+{
+	struct xt_mod_info *info = (struct xt_mod_info *)m->data;
+
+	info->mod = 2;
+	info->result = 0;
+	info->weight = 1;
+}
+
+/* Function which parses command options; returns true if it
+   ate an option */
+
+static int parse(int c, char **argv, int invert, unsigned int *flags,
+	const void *entry, struct xt_entry_match **match)
+{
+	struct xt_mod_info *info = (struct xt_mod_info *)(*match)->data;
+
+	switch (c) {
+	case '1':
+		if (*flags & MOD_SRC_PORT)
+			xtables_error(PARAMETER_PROBLEM,
+				   "mod match: Only use --src-mod-port ONCE!");
+		info->flags |= MOD_SRC_PORT;
+
+		break;
+
+	case '2':
+		if (*flags & MOD_DST_PORT)
+			xtables_error(PARAMETER_PROBLEM,
+				   "mod match: Only use --dst-mod-port ONCE!");
+		info->flags |= MOD_DST_PORT;
+
+		break;
+
+	case '3':
+		if (*flags & MOD_SRC_ADDR)
+			xtables_error(PARAMETER_PROBLEM,
+				   "mod match: Only use --src-mod-addr ONCE!");
+		info->flags |= MOD_SRC_ADDR;
+
+		break;
+
+	case '4':
+		if (*flags & MOD_DST_ADDR)
+			xtables_error(PARAMETER_PROBLEM,
+				   "mod match: Only use --dst-mod-addr ONCE!");
+		info->flags |= MOD_DST_ADDR;
+
+		break;
+
+	case '5':
+		if (!atol(argv[optind-1]))
+			xtables_error(PARAMETER_PROBLEM,
+				   "mod match: modulus cannot be zero!");
+		
+		info->mod = atol(argv[optind-1]);
+		
+		break;
+
+	case '6':
+		info->result = atol(argv[optind-1]);
+		
+		break;
+
+	case '7':
+		info->weight = atol(argv[optind-1]);
+		
+		break;
+
+	default:
+		return 0;
+	}
+	
+	return 1;
+}
+
+/* Final check; we don't care. */
+static void
+final_check(unsigned int flags)
+{
+}
+
+/* Prints out the info. */
+static void
+print(const void *ip,
+      const struct xt_entry_match *match,
+      int numeric)
+{
+	struct xt_mod_info *info = (struct xt_mod_info *)match->data;
+
+	if (info->flags & MOD_SRC_PORT)
+		printf("src port ");
+	if (info->flags & MOD_DST_PORT)
+		printf("dst port ");
+	if (info->flags & MOD_SRC_ADDR)
+		printf("src addr ");
+	if (info->flags & MOD_DST_ADDR)
+		printf("dst addr ");
+	
+	printf("mod %d res %d weight %d ", info->mod, info->result, info->weight);
+}
+
+/* Saves the union xt_info in parsable form to stdout. */
+static void
+save(const void *ip, const struct xt_entry_match *match)
+{
+	struct xt_mod_info *info = (struct xt_mod_info *)match->data;
+
+	if (info->flags & MOD_SRC_PORT)
+		printf("--src-mod-port ");
+	if (info->flags & MOD_DST_PORT)
+		printf("--dst-mod-port ");
+	if (info->flags & MOD_SRC_ADDR)
+		printf("--src-mod-addr ");
+	if (info->flags & MOD_DST_ADDR)
+		printf("--dst-mod-addr ");
+	
+	printf("--mod %d --result %d --weight %d", info->mod, info->result, info->weight);
+}
+
+static struct xtables_match mod = { 
+	.init           = init,
+	.next           = NULL,
+	.name           = "mod",
+	.version        = XTABLES_VERSION,
+	.size           = XT_ALIGN(sizeof(struct xt_mod_info)),
+	.userspacesize  = XT_ALIGN(sizeof(struct xt_mod_info)),
+	.help           = help,
+	.parse          = parse,
+	.final_check    = final_check,
+	.print          = print,
+	.save           = save,
+	.extra_opts     = opts,
+	.family         = AF_INET,
+};
+
+static __attribute__((constructor)) void mod_mt_ldr(void)
+{
+	xtables_register_match(&mod);
+}
diff -Nurb xtables-addons-1.19.orig/extensions/Mbuild xtables-addons-1.19/extensions/Mbuild
--- xtables-addons-1.19.orig/extensions/Mbuild	2009-10-12 17:57:08.000000000 +0100
+++ xtables-addons-1.19/extensions/Mbuild	2010-10-14 14:23:29.000000000 +0100
@@ -24,3 +24,4 @@
 obj-${build_pknock}      += pknock/
 obj-${build_psd}         += libxt_psd.so
 obj-${build_quota2}      += libxt_quota2.so
+obj-${build_mod}         += libxt_mod.so
diff -Nurb xtables-addons-1.19.orig/extensions/mod.Kbuild xtables-addons-1.19/extensions/mod.Kbuild
--- xtables-addons-1.19.orig/extensions/mod.Kbuild	1970-01-01 01:00:00.000000000 +0100
+++ xtables-addons-1.19/extensions/mod.Kbuild	2010-10-14 14:23:29.000000000 +0100
@@ -0,0 +1 @@
+obj-${build_mod}         += xt_mod.o
diff -Nurb xtables-addons-1.19.orig/extensions/xt_mod.c xtables-addons-1.19/extensions/xt_mod.c
--- xtables-addons-1.19.orig/extensions/xt_mod.c	1970-01-01 01:00:00.000000000 +0100
+++ xtables-addons-1.19/extensions/xt_mod.c	2010-10-14 14:43:28.000000000 +0100
@@ -0,0 +1,116 @@
+/*
+ * xtables module to match port moduluses.
+ *   (c) Lawrence Manning, SmoothWall Ltd <lawrence@smoothwall.net>
+ *
+ * Released under the terms of GNU GPLv2.
+ *
+ */
+#include <linux/module.h>
+#include <linux/skbuff.h>
+#include <linux/ip.h>
+#include <linux/udp.h>
+#include <linux/netfilter/x_tables.h>
+#include "xt_mod.h"
+#include "compat_xtables.h"
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Lawrence Manning, SmoothWall Ltd <lawrence.manning@smoothwall.net>");
+MODULE_DESCRIPTION("xtables address and port modulus match module");
+
+static bool
+match(const struct sk_buff *skb, const struct xt_match_param *par)
+{
+	const struct xt_mod_info *info = par->matchinfo;
+	const struct iphdr *iph = (struct iphdr *) skb->network_header;
+	int result = 0;
+	u16 _ports[2], *pptr;
+
+	/* Must not be a fragment. */
+	if (par->fragoff != 0)
+	{
+	        if (par->fragoff == 1)
+		{
+			pr_debug("mod: Dropping evil TCP offset=1 frag.\n");
+			*par->hotdrop = true;
+		}
+		return false;
+	}
+	
+	/* Ignore non TCP or UDP and never match. */
+	if (iph->protocol != SOL_TCP && iph->protocol != SOL_UDP)
+		return false;
+	
+	pptr = skb_header_pointer(skb, par->thoff, sizeof(_ports), _ports);
+
+	/* Must be big enough to read ports. */
+	if (pptr == NULL)
+	{
+		/* We've been asked to examine this packet, and we
+		 * can't.  Hence, no choice but to drop. */
+		 pr_debug("mod: Dropping evil offset=0 tinygram.\n");
+		*par->hotdrop = 1;
+		return false;
+	}
+
+	pr_debug("mod: Src: %08x Dst: %08x Src port: %d Dst port: %d\n",
+		ntohl(iph->saddr), ntohl(iph->daddr), ntohs(pptr[0]), ntohs(pptr[1]));
+
+	/* Modulus must be non zero. */
+	if (info->mod == 0) return false;
+	
+	if (info->flags & MOD_SRC_PORT)
+		result += ntohs(pptr[0]) % info->mod;
+	if (info->flags & MOD_DST_PORT)
+		result += ntohs(pptr[1]) % info->mod;
+	if (info->flags & MOD_SRC_ADDR)
+		result += ntohl(iph->saddr) % info->mod;
+	if (info->flags & MOD_DST_ADDR)
+		result += ntohl(iph->daddr) % info->mod;
+
+	result = result % info->mod;
+
+	pr_debug("mod: after flags: %d mod: %d result: %d looking for %d to %d:\n",
+		info->flags, info->mod, result, info->result, info->result + info->weight - 1);
+	
+	if (result >= info->result && result <= info->result + info->weight - 1)
+		return true;
+	else
+		return false;
+}
+
+static bool check(const struct xt_mtchk_param *par)
+{
+        unsigned int matchsize = par->match->matchsize; 
+
+	/* verify size */
+	if (matchsize != XT_ALIGN(sizeof(struct xt_mod_info)))
+		return false;
+
+	return true;
+}
+
+static struct xt_match mod_match = 
+{ 
+	.name = "mod", 
+	.match = &match, 
+	.checkentry = &check, 
+	.destroy = NULL, 
+	.matchsize  = XT_ALIGN(sizeof(struct xt_mod_info)),
+	.me = THIS_MODULE,
+	.family = NFPROTO_IPV4,
+};
+
+static int __init init(void)
+{
+	pr_debug("mod: init\n");
+	return xt_register_match(&mod_match);
+}
+
+static void __exit fini(void)
+{
+	pr_debug("mod: exit\n");
+	xt_unregister_match(&mod_match);
+}
+
+module_init(init);
+module_exit(fini);
diff -Nurb xtables-addons-1.19.orig/extensions/xt_mod.h xtables-addons-1.19/extensions/xt_mod.h
--- xtables-addons-1.19.orig/extensions/xt_mod.h	1970-01-01 01:00:00.000000000 +0100
+++ xtables-addons-1.19/extensions/xt_mod.h	2010-10-14 14:23:29.000000000 +0100
@@ -0,0 +1,19 @@
+#ifndef _XT_MOD_H
+#define _XT_MOD_H
+
+#define MOD_SRC_PORT		0x01	/* Match source port */
+#define MOD_DST_PORT		0x02	/* Match destination port */
+#define MOD_SRC_ADDR		0x04	/* Match source port */
+#define MOD_DST_ADDR		0x08	/* Match destination port */
+
+struct xt_mod_info
+{
+	u_int32_t mod;
+	u_int32_t result;
+	u_int32_t weight;
+	
+	/* Flags from above */
+	u_int8_t flags;
+};
+
+#endif /* _XT_MOD_H */
diff -Nurb xtables-addons-1.19.orig/extensions/xt_mod.Kconfig xtables-addons-1.19/extensions/xt_mod.Kconfig
--- xtables-addons-1.19.orig/extensions/xt_mod.Kconfig	1970-01-01 01:00:00.000000000 +0100
+++ xtables-addons-1.19/extensions/xt_mod.Kconfig	2010-10-14 14:23:29.000000000 +0100
@@ -0,0 +1,5 @@
+config NETFILTER_XT_MATCH_MOD
+	tristate '"mod" match support'
+	depends on NETFILTER_XTABLES && NETFILTER_ADVANCED
+	---help---
+	Modulus matching for load balancing etc
diff -Nurb xtables-addons-1.19.orig/mconfig xtables-addons-1.19/mconfig
--- xtables-addons-1.19.orig/mconfig	2009-10-12 17:57:08.000000000 +0100
+++ xtables-addons-1.19/mconfig	2010-10-14 14:23:29.000000000 +0100
@@ -24,3 +24,4 @@
 build_pknock=m
 build_psd=m
 build_quota2=m
+build_mod=m
