#! /bin/bash

# Prepare a build environment. This really ought to verify that the host
#   has all the build tools needed.
#

# The rest of the build system should use these vars instead of hard-coding paths.

function set_build_environment() {
  # Maybe don't redirect I/O?
  NO_REDIRECT="$1"

  # Define vars and settings common to both tool chain and final builds
  #
  set +h
  umask 022
  export JOBS
  export LC_ALL=POSIX

  # Get the common, explicit environment prepared by top make
  . crumbs/build_environment

  # Prepare redirection
  if [ "$NO_REDIRECT" == "" ]; then
    exec <${BUILD_IN} >>${BUILD_OUT}
  fi

  # prefix of where the tool chain is installed.
  export TOOLS_DIR="/tools"

  # Must show the correct ProgInterp
  case $mARCH in
    i*86)
      expectInterp="/tools/lib/ld-linux.so.2"
    ;;
    x86_64)
      expectInterp="/tools/lib64/ld-linux-x86-64.so.2"
    ;;
  esac

  # DISTRIB_PATH is the 'root' of the build tree; it is the same for building
  #   the tool chain and for the final build.
  export DISTRIB_PATH=`pwd | sed -e 's=/build.*=='`

  # Now get the toolchain lib path
  case $BUILD_PHASE in
    Stage_1)
      # Is pure host compiler at this point
      LDLINUX="      ProgInterp: (host system)"
      ;;
    Stage_2)
      # Look at Stage 1 result
      LDLINUX="      `cat crumbs/tc_stage_1-ld_linux.out`; s/b: ${expectInterp}"
      ;;
    Stage_3)
      # Look at Stage 2 result
      LDLINUX="      `cat crumbs/tc_stage_2-ld_linux.out`; s/b: ${expectInterp}"
      ;;
    Final)
      # Look at Stage 2 result
      LDLINUX="      `cat crumbs/tc_stage_2-ld_linux.out`; s/b: ${expectInterp}"
      ;;
  esac
    
  # Now set the build-specific vars
  case $BUILD_PHASE in
    PreDownload)
      # pre-fetching packages from internet
      # ROOT is equivalent to LFS' $LFS
      export ROOT="$DISTRIB_PATH"
      ;;

    Stage_*)
      # Not chrooted, so we are building the tool chain.
      # ROOT is equivalent to LFS' $LFS
      export ROOT="$DISTRIB_PATH"
      # We'll try using TOOLS_DIR for the tool dir path. It might need
      #   to be /tools/bin in the end.
      export PATH="${TOOLS_DIR}/bin:${TOOLS_DIR}/sbin"
      PATH="$PATH:/bin:/usr/bin/:/sbin:/usr/sbin:${ROOT}/build/toolcrib"
      # PKG_ROOT is what the package considers to be root for installation.
      export PKG_ROOT="$ROOT"
      # PKG_DIR is the configure-like 'prefix' where the package ends up installed
      export PKG_DIR="$TOOLS_DIR"

      # Now report the environment
      #
      echo "    Environment:"
      echo "      Build Phase: $BUILD_PHASE; mARCH=$mARCH"
      echo "      PKG_ROOT=$PKG_ROOT; PKG_DIR=$PKG_DIR; "
      echo "      ROOT=$ROOT; TOOLS_DIR=$TOOLS_DIR; "
      echo "      PATH=$PATH; "
      echo "$LDLINUX"
      echo
      ;;

    Final)
      # Chrooted, so we are building the final product

      # LD_LIBRARY_PATH shouldn't be needed any more, since openssl is no longer
      #   installed into /usr/ssl.
      # export LD_LIBRARY_PATH=/usr/ssl/lib

      # ROOT is equivalent to LFS' $LFS
      export ROOT=""
      export PATH="/bin:/sbin:/usr/bin:/usr/sbin"
      PATH="$PATH:${TOOLS_DIR}/bin:${TOOLS_DIR}/sbin:${ROOT}/build/toolcrib"
      # placeholder to build PKG_ROOT
      export PKG_ROOT_PATH="$ROOT/build/buildroot"
      # PKG_ROOT is what the package considers to be root for installation.
      #   It's set to a value guaranteed to cause an error if it ain't set when the
      #   package name becomes known. It will eventually be set as:
      #   export PKG_ROOT="${PKG_ROOT_PATH}/$PACKAGE
      export PKG_ROOT="/THIS-AINT-BEEN-SET-YET/"
      # PKG_DIR is the configure-like 'prefix' where the package ends up installed
      export PKG_DIR="/usr"

      # Now report the environment
      #
      echo "    Environment:"
      echo "      Build Phase: $BUILD_PHASE; mARCH=$mARCH"
      echo "      (PKG_ROOT not yet set); PKG_DIR=$PKG_DIR; "
      echo "      ROOT=$ROOT; TOOLS_DIR=$TOOLS_DIR; "
      echo "      PATH=$PATH; "
      echo "$LDLINUX"
      echo
      ;;

    Media)
      # assembling/finishing install media
      # ROOT is equivalent to LFS' $LFS
      export ROOT="$DISTRIB_PATH"
      echo "    Environment:"
      echo "      Build Phase: $BUILD_PHASE; mARCH=$mARCH"
      echo "      ROOT=$ROOT; "
      ;;

    Update)
      # preparing an update
      echo "    Environment:"
      echo "      Build Phase: $BUILD_PHASE; mARCH=$mARCH"
      ;;

    *)
      echo "Not in a building phase. Gruffly refusing to proceed."
      exit 1
      ;;
  esac
}
