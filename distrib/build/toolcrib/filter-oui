#!/usr/bin/perl
#
# Copyright 2006-2013 Roy Hills
# Tweaked for Smoothwall by panda.
#
# This file is part of arp-scan.
# 
# arp-scan is free software: you can redistribute it and/or modify it under the terms of the 
# GNU General Public License as published by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
# 
# arp-scan is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along with arp-scan.
# If not, see <http://www.gnu.org/licenses/>.
#
# get-oui -- Fetch the OUI file from the IEEE website
#
# Author: Roy Hills
# Date: 16 March 2006
#
# This script downloads the Ethernet OUI file from the IEEE website, and
# converts it to the format needed by arp-scan.

# Neal Murphy; June 2020
# Renamed to 'filter-oui.pl'
# Modified for Smoothwall Express build system to just filter the file.
# It creates a plain text /usr/share/oui.txt and an HTML-safe hash in
#   /usr/lib/smoothwall/oui_vendor_html.pm.

use warnings;
use strict;
use Getopt::Std;

my $usage =
qq/Usage: filter-oui [options]
Filter the IEEE OUI data into the form used by arp-scan and into a Perl
hash containing HTML-safe vendor names.

'options' is one or more of:
        -h Display this message.
        -v Give verbose progress messages.
/;
my %opts;
my $verbose;
my $filename;
my $url;
my $lineno = 0;

# Process options
die "$usage\n" unless getopts('hv',\%opts);
if ($opts{h}) {
	print "$usage\n";
	exit(0);
}
$verbose=$opts{v} ? 1 : 0;

# Open for read
print "Opening source file:\n" if $verbose;
open INPUT, "<../../../downloads/oui.txt" || die "Could not open oui.txt for reading";

# Open the output file for writing.
print "Opening output file:\n" if $verbose;
open OUTPUT, ">oui.txt" || die "Could not open device-ids-0.0/oui.txt for writing";

# Open the Perl output file for writing.
print "Opening output perl script: device-ids-0.0/oui_vendor.pm\n" if $verbose;
open PLOUTPUT, ">oui_vendor.pm" || die "Could not open device-ids-0.0/oui_vendor.pm for writing";

# Write the header comments to the output file.
my ($sec,$min,$hour,$mday,$mon,$year,undef,undef,undef) = localtime();
$year += 1900;
$mon++;

my $date_string = sprintf("%04d-%02d-%02d %02d:%02d:%02d", $year, $mon, $mday, $hour, $min, $sec);

my $header_comments =
qq/# ieee-oui.txt -- Ethernet vendor OUI file for arp-scan
#
# This file contains the plain text Ethernet vendor OUIs.  These are used
# to determine the vendor of an Ethernet interface given the MAC address.
#
# Each line of this file contains an OUI-vendor mapping in the form:
#
# <OUI><TAB><Vendor>
#
# Where <OUI> is the first three bytes of the MAC address in hex, and <Vendor>
# is the name of the vendor.
#
# Blank lines and lines beginning with "#" are ignored.
#
# This file was automatically generated by get-oui at $date_string
# using IEEE's OUI data.
#
# Do not edit this file!
/;

print OUTPUT $header_comments;

# Parse the content received from the URL, and write the OUI entries to the output file.
# Match lines that look like this:
# 00-00-00   (hex)                XEROX CORPORATION
# and write them to the output file looking like this:
# 000000	XEROX CORPORATION

print PLOUTPUT qq/# SmoothWall CGIs
#
# This code is distributed under the terms of the GPL
#
# (c) The SmoothWall Team
#
# This perl module was automatically generated during the Smoothwall Express
# build by filter-oui.pl at $date_string using IEEE's OUI data.
# It is generated in the device-ids pkg.
#
# The hash data is the html-safe vendor name; the key is the OUI sans dashes,
# colons and other separators.

package oui_vendor;
require Exporter;
\@ISA = qw(Exporter);

\@EXPORT = qw(%oui_vendor_html);


\%oui_vendor_html = (\n/;

while (<INPUT>) {
	next unless (/\(hex\)/);
	$_ =~ m/^\s*(\w{2})-(\w{2})-(\w{2})\s+\(hex\)\s+(.*?)\s*$/gm;
	print OUTPUT "$1$2$3\t$4\n";
	print PLOUTPUT "    '$1$2$3' => ";
	my $vendor = $4;
	$vendor =~ s/\R//g;
        $vendor =~ s/&/&amp;/g;
        $vendor =~ s/,/&#44;/g;
        $vendor =~ s/</&lt;/g;
        $vendor =~ s/>/&gt;/g;
        $vendor =~ s/'/&#39;/g;   # MSIE doesn't know "&apos;"
	print PLOUTPUT "'$vendor',\n";
	$lineno++;
}

print PLOUTPUT ");\n\n1;\n";


# All done.  Close the output file and print OUI entry count

close INPUT || die "Error closing input file\n";
close OUTPUT || die "Error closing output file\n";
close PLOUTPUT || die "Error closing output perl script\n";
print "$lineno OUI entries written\n" if $verbose;

exit 0;
