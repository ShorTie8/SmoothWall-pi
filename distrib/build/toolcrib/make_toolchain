#!/bin/bash +h
#
# SmoothWall Build system.
#
# Parts (c) SmoothWall Ltd 2005
# Parts (c) Neal P. Murphy, 2009
#
# This code is distributed under the terms of the GPL v2.
#

# Turn off path caching
set +h
 
# When building the toolchain, use the host's sudo to become root. It may require
#   entering a password or three, but that's preferable to clobbering the host's
#   rootfs.

# First be sure we are being run from the build directory, not from a relative path
#   'make -C build build' does it right; this is in case this script is run en mano.
#
ME=`basename $0`
if [ "$0" != "toolcrib/$ME" -a "$0" != "./toolcrib/$ME" ]; then
  echo "Please operate the build system from the build directory!"
  exit 1
fi
unset ME

. crumbs/build_environment

# Handle redirection
exec <${BUILD_IN} >>${BUILD_OUT} 2>&1

# For debugging
(
  echo -e "\nInitial environment:"
  tput smso;echo PRE-SET;tput rmso;set;echo
  tput smso;echo PRE-ENV;tput rmso;env|sort;echo
  tput smso;echo PRE-EXPORT;tput rmso;export;echo
) > crumbs/tc-Stage_$1.debug

# Grab our needed environment and utility functions
#
source toolcrib/environment
source toolcrib/functions

# Set up parallel make, as needed
#   First export/define the three associated vars
#   Then get the CPU count and set the _MP option
export JOBS
export JOBS_UP="-j 1"
export JOBS_MP
cpu_count


# This is the tool chain boot strap, where '/' is the real system root.
# /tools MUST point to the correct .../distrib/tools.
#
THISDIR=`/bin/pwd`
FROM_PWD="`dirname \"$THISDIR\"`/tools"
if [ `id -u` -eq 0 ]; then CMD="bash"; else CMD="sudo su"; fi
if [ -L "/tools" ]; then
  FROM_TOOLS="`readlink /tools 2>/dev/null`"
  if [ "$FROM_TOOLS" != "$FROM_PWD" ]; then
    echo "correcting the /tools symlink on the host"
    ${CMD} -c "rm -f /tools >/dev/null 2>&1; cd ../; ln -sv $FROM_PWD /tools" \
      || (echo "/tools link creation failure!"; exit -1)
    if [ $? -ne 0 ]; then
      exit $?
    fi
  fi
else
  echo "creating the /tools symlink on the host"
  ${CMD} -c "rm -f /tools >/dev/null 2>&1; cd ../; ln -sv $FROM_PWD /tools" \
      || (echo "/tools link creation failure!"; exit -1)
  if [ $? -ne 0 ]; then
    exit $?
  fi
fi
  
unset FROM_TOOLS THISDIR FROM_PWD

# Build the tool chain stage as specified by $1
#

case $1 in
  PREP)
    mso ON
    echo -e "\nPreparing environment for building"
    mso OFF
    lUID=`id -u`
    lGID=`id -g`
    # Only change ownership if the user is not root
    if [ "$lUID" != "0" ]; then
      ls -lsd ../tools | grep root && (
        CHOWN_ARGS="$lUID:$lGID ../tools"
        sudo su -c "/bin/chown $CHOWN_ARGS"
      )
    fi
    ;;
  1)
    mso ON
    echo -e "\nBuilding Tool Chain, Stage 1"
    mso OFF
    build_tc_stage_1
    ;;
  2)
    mso ON
    echo -e "\nBuilding Tool Chain, Stage 2"
    mso OFF
    build_tc_stage_2
    ;;
  3)
    mso ON
    echo -e "\nBuilding Tool Chain, Stage 3"
    mso OFF
    build_tc_stage_3
    ;;
  *)
    echo
    echo -e "\nWall? I don't know how to build stage '$1'!"
    exit -1
esac

# For debugging
(
  echo -e "\nEnvironment on exit:"
tput smso;echo POST-SET;tput rmso;set;echo
tput smso;echo POST-ENV;tput rmso;env|sort;echo
tput smso;echo POST-EXPORT;tput rmso;export;echo
) >> crumbs/tc-Stage_$1.debug


