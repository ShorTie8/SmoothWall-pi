#! /bin/bash +h

set +h

# Get environs
#
#   Save STDOUT; it's the .out dest and quite needed.
exec 4>&1
. toolcrib/environment
set_build_environment NO_REDIRECT
#   Restore STDOUT
exec 1>&4 2>&1

echo
echo "Final toolchain check"
echo

# Initialize STATUS
#
STATUS=0

# Get GCC version
#
set `egrep "^VERSION" sources/gcc/Makefile`
VERSION=$3
#################

# Check for gcc environs problems. These must all be correct
#   before proceeding to finish the final build!

# Does 'cc' exist as symlink?
if [ "`readlink -n -s ${PKG_DIR}/bin/cc`" != "gcc" ]; then
  echo "cc as symlink to gcc not found!"
  STATUS=1
fi

# Does 'ccp' exist as /lib/cpp symlink?
if [ "`readlink -n -s /lib/cpp`" != "/usr/bin/cpp" ]; then
  echo "/lib/ccp as symlink to /usr/bin/cpp is missing or wrong!"
  readlink /lib/cpp | sed -e 's/^/    /'
  STATUS=1
fi

# Verify that the final build environment is correct.

# compile an empty program
#
echo 'main(){}' > dummy.c
cc dummy.c -v -Wl,--verbose &> dummy.log

# Right program interpreter?
#
readelf -l a.out | grep ': /lib' >/dev/null 2>&1
if [ $? -ne 0 ]; then
  echo "gcc uses wrong program interpreter!"
  STATUS=1
fi

# GCC using correct startfiles?
#
for i in 1 i n; do
  grep "/usr/lib.*/crt${i}.o succeeded" dummy.log >/dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "crt${i} startfile is wrong!"
    grep "/crt${i}.o succeeded" | sed -e 's/^/    /'
    STATUS=1
  fi
done

# GCC searching for correct header files?
#
grep -B3 '^ /usr/include' dummy.log >/tmp/a.a
case $mARCH in
  $ARCH32) cat >/tmp/b.b <<END
#include <...> search starts here:
 /usr/lib/gcc/${FINAL_TGT}/${VERSION}/include
 /usr/lib/gcc/${FINAL_TGT}/${VERSION}/include-fixed
 /usr/include
END
    ;;
  $ARCH64) cat >/tmp/b.b <<END
#include <...> search starts here:
 /usr/lib/gcc/${FINAL_TGT}/${VERSION}/include
 /usr/lib/gcc/${FINAL_TGT}/${VERSION}/include-fixed
 /usr/include
END
    ;;
  *) touch /tmp/b.b ;;
esac
diff /tmp/a.a /tmp/b.b >/dev/null 2>&1
if [ $? -ne 0 ]; then
  echo "gcc is searching for the wrong header files:"
  sed -e 's/^/    /' /tmp/a.a
  echo "gcc should search for:"
  sed -e 's/^/    /' /tmp/b.b
  STATUS=1
fi
rm /tmp/a.a /tmp/b.b

# Loader using correct search paths?
#
grep 'SEARCH.*/usr/lib' dummy.log |sed 's|; |\n|g' >/tmp/a.a
case $mARCH in
  $ARCH32) cat >/tmp/b.b <<END
SEARCH_DIR("/usr/${FINAL_TGT}/lib")
SEARCH_DIR("/usr/local/lib")
SEARCH_DIR("/lib")
SEARCH_DIR("/usr/lib");
END
    ;;
  $ARCH64) cat >/tmp/b.b <<END
SEARCH_DIR("/usr/${FINAL_TGT}/lib64")
SEARCH_DIR("/usr/local/lib64")
SEARCH_DIR("/lib64")
SEARCH_DIR("/usr/lib64")
SEARCH_DIR("/usr/${FINAL_TGT}/lib")
SEARCH_DIR("/usr/local/lib")
SEARCH_DIR("/lib")
SEARCH_DIR("/usr/lib");
END
    ;;
  *) touch /tmp/b.b ;;
esac
diff /tmp/a.a /tmp/b.b >/dev/null 2>&1
if [ $? -ne 0 ]; then
  echo "Loader is using incorrect search paths:"
  sed -e 's/^/    /' /tmp/a.a
  echo "Loader should use:"
  sed -e 's/^/    /' /tmp/b.b
  STATUS=1
fi
rm /tmp/a.a /tmp/b.b

# Using correct libc?
#
grep "attempt to open /lib/libc.so.6" dummy.log >/dev/null 2>&1
case $mARCH in
  $ARCH32) grep "attempt to open /lib/libc.so.6" dummy.log >/dev/null 2>&1
    ;;
  $ARCH64) grep "attempt to open /lib64/libc.so.6" dummy.log >/dev/null 2>&1
    ;;
  *) false ;;
esac
if [ $? -ne 0 ]; then
  echo "Loader is using incorrect libc:"
  egrep "attempt to open.*/libc\.so\." dummy.log | sed -e 's/^/    /'
  STATUS=1
fi

# Using correct dynamic linker?
#
case $mARCH in
  $ARCH32) grep "found ld-linux.so.2 at /lib/ld-linux.so.2" dummy.log >/dev/null 2>&1
    ;;
  $ARCH64) grep "found ld-linux-x86-64.so.2 at /lib64/ld-linux-x86-64.so.2" dummy.log >/dev/null 2>&1
    ;;
  *) false ;;
esac
if [ $? -ne 0 ]; then
  echo "Wrong or no dynamic linker found!"
  grep "found" dummy.log | sed -e 's/^/    /'
  STATUS=1
fi

#################

# Now clean up and finish up

# Inform if errors were found
#
if [ $STATUS -eq 1 ]; then
  echo
  echo
  echo "Errors found!"
  echo
  exit 1

else

  # All is well; it is safe to proceed!
  #
  rm -f dummy.c dummy.log a.out
  exit 0

fi
